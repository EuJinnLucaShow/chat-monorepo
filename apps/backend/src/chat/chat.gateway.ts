import {
  WebSocketGateway,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayConnection,
  OnGatewayDisconnect,
  WebSocketServer,
} from "@nestjs/websockets";
import { Server, Socket } from "socket.io";
import { Injectable } from "@nestjs/common";
import { SupabaseService } from "../supabase/supabase.service";
import { CreateMessageDto, JoinRoomDto } from "./dto/message.dto";

@Injectable()
@WebSocketGateway({
  cors: {
    origin: process.env.FRONTEND_URL || "http://localhost:3000",
    credentials: true,
  },
})
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server: Server;

  private connectedUsers = new Map<
    string,
    { socketId: string; userId: string }
  >();

  constructor(private readonly supabaseService: SupabaseService) {}

  handleConnection(client: Socket) {
    console.log(`Client connected: ${client.id}`);
  }

  handleDisconnect(client: Socket) {
    console.log(`Client disconnected: ${client.id}`);
    // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–∞–ø–∏
    for (const [key, value] of this.connectedUsers.entries()) {
      if (value.socketId === client.id) {
        this.connectedUsers.delete(key);
        break;
      }
    }
  }

  @SubscribeMessage('join_room')
  async handleJoinRoom(
    @MessageBody() data: JoinRoomDto & { profile: any },
    @ConnectedSocket() client: Socket,
  ) {
    const { roomId, userId, profile } = data;
    
    await client.join(roomId);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this.connectedUsers.set(userId, {
      socketId: client.id,
      userId,
      profile,
      currentRoom: roomId,
    });

    const messages = await this.supabaseService.getMessages(roomId);
    client.emit('room_messages', messages);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –≤ –∫—ñ–º–Ω–∞—Ç—ñ
    const onlineUsers = Array.from(this.connectedUsers.values())
      .filter(user => user.currentRoom === roomId)
      .map(user => user.profile);
    
    this.server.to(roomId).emit('online_users', onlineUsers);
    
    client.to(roomId).emit('user_joined', {
      userId,
      username: profile.username,
      message: `${profile.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏`,
    });
  }

  @SubscribeMessage("leave_room")
  async handleLeaveRoom(
    @MessageBody() data: { roomId: string; userId: string },
    @ConnectedSocket() client: Socket
  ) {
    const { roomId, userId } = data;

    await client.leave(roomId);

    client.to(roomId).emit("user_left", {
      userId,
      message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–Ω—É–≤ –∫—ñ–º–Ω–∞—Ç—É",
    });
  }

  @SubscribeMessage("send_message")
  async handleMessage(
    @MessageBody() data: CreateMessageDto,
    @ConnectedSocket() client: Socket
  ) {
    try {
      const { content, userId, roomId } = data;

      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      const message = await this.supabaseService.createMessage(
        content,
        userId,
        roomId
      );

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∫—ñ–º–Ω–∞—Ç–∏
      this.server.to(roomId).emit("new_message", message);

      return message;
    } catch (error) {
      client.emit("error", { message: "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" });
    }
  }

  @SubscribeMessage("get_rooms")
  async handleGetRooms(@ConnectedSocket() client: Socket) {
    try {
      const rooms = await this.supabaseService.getRooms();
      client.emit("rooms_list", rooms);
    } catch (error) {
      client.emit("error", { message: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç" });
    }
  }

  @SubscribeMessage("create_room")
  async handleCreateRoom(
    @MessageBody() data: { name: string; description: string; userId: string },
    @ConnectedSocket() client: Socket
  ) {
    try {
      const { name, description, userId } = data;

      const room = await this.supabaseService.createRoom(
        name,
        description,
        userId
      );

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      this.server.emit("room_created", room);

      return room;
    } catch (error) {
      client.emit("error", { message: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏" });
    }
  }

  @SubscribeMessage("get_online_users")
  async handleGetOnlineUsers(
    @MessageBody() data: { roomId: string },
    @ConnectedSocket() client: Socket
  ) {
    const { roomId } = data;
    const onlineUsers = Array.from(this.connectedUsers.values())
      .filter((user) => user.currentRoom === roomId)
      .map((user) => user.profile);

    client.emit("online_users", onlineUsers);
  }
}

@SubscribeMessage('upload_file')
async handleFileUpload(
  @MessageBody() data: {
    fileName: string;
    fileType: string;
    fileSize: number;
    userId: string;
    roomId: string;
  },
  @ConnectedSocket() client: Socket,
) {
  try {
    const { fileName, fileType, fileSize, userId, roomId } = data;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 10MB)
    if (fileSize > 10 * 1024 * 1024) {
      client.emit('error', { message: '–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π (–º–∞–∫—Å–∏–º—É–º 10MB)' });
      return;
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
    const uniqueFileName = `${Date.now()}-${fileName}`;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–º
    const message = await this.supabaseService.createMessage(
      `üìé ${fileName}`,
      userId,
      roomId,
      'file',
      {
        fileName: uniqueFileName,
        originalName: fileName,
        fileType,
        fileSize,
      }
    );

    this.server.to(roomId).emit('new_message', message);
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ URL –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const uploadUrl = await this.supabaseService.getUploadUrl(uniqueFileName);
    client.emit('upload_url', { uploadUrl, messageId: message.id });
    
  } catch (error) {
    client.emit('error', { message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É' });
  }
}
